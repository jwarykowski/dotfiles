snippet fun "function"
	function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet asf "async function"
	async function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}

snippet anf "anonymous function"
	function(${1}) {
		${0:${VISUAL}}
	}

snippet vaf "anonymous function with var assignment"
	var ${1:function_name} = function(${2}) {
		${0:${VISUAL}}
	};

snippet vf "function assigned to variable"
	var ${1:function_name} = function $1(${2}) {
		${0:${VISUAL}}
	};

snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}

snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	} else {
		${2}
	}

snippet ter "Ternary: `condition ? true : false`"
	$1 ? $2: $0

snippet switch "switch (xyz)"
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}

snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	}

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}

snippet terr "throw new error"
	throw new Error('${1:error message}')

snippet ret "return"
	return ${0:result};

snippet for "for (...) {...}"
	for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
		${0:${VISUAL}}
	}

snippet forr "reversed for (...) {...}"
	for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
		${0:${VISUAL}}
	}

snippet wh "(condition) { ... }"
	while (${1:true}) {
		${0:${VISUAL}}
	}

snippet wht "(true) { ... }"
	while (true) {
		${0:${VISUAL}}
	}

snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while ($1);

snippet fori "for (let x in y) { ... }"
	for (let ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# documentation
snippet /** "docblock"
	/**
	 * ${0:description}
	 *
	 */

snippet @par "@parem"
	@param {${1:type}} ${2:name} ${0:description}

snippet @ret "@return"
	@return {${1:type}} ${0:description}

# json
snippet jsonp "json parse"
	JSON.parse(${0:jstr});

snippet jsons "json stringify"
	JSON.stringify(${0:object});

snippet get "getElementsBy{$TagName}"
	getElementsBy${1:TagName}('${0}')

snippet gett "getElementBy{$TagName}"
	getElementBy${1:Id}('${0}')

snippet by. "getElementsByClassName"
	${1:document}.getElementsByClassName('${0:class}')

snippet by# "getElementById"
	${1:document}.getElementById('${0:element ID}')

snippet qs "querySelector"
	${1:document}.querySelector('${0:CSS selector}')

snippet qsa "querySelectorAll"
	${1:document}.querySelectorAll('${0:CSS selector}')

snippet de "debugger"
	debugger

snippet cl "console.log"
	console.log(${0})

snippet cd "console.debug"
	console.debug(${0})

snippet ce "console.error"
	console.error(${0})

snippet cw "console.warn"
	console.warn(${0})

snippet ci "console.info"
	console.info(${0})

snippet ct "console.trace"
	console.trace(${0:label})

snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}")
	${0:${VISUAL}}
	console.timeEnd("$1")

snippet ctimestamp "console.timeStamp"
	console.timeStamp("${1:label}")

snippet ca "console.assert"
	console.assert(${1:expression}, ${0:obj})

snippet cclear "console.clear"
	console.clear()

snippet cdir "console.dir"
	console.dir(${0:obj})

snippet cdirx "console.dirxml"
	console.dirxml(${1:object})

snippet cgroup "console.group"
	console.group("${1:label}")
	${0:${VISUAL}}
	console.groupEnd()

snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}")
	${0:${VISUAL}}
	console.groupEnd();

snippet cprof "console.profile"
	console.profile("${1:label}")
	${0:${VISUAL}}
	console.profileEnd()

snippet ctable "console.table"
	console.table(${1:"${2:value}"})

snippet clstr "console.log stringified"
	console.log(JSON.stringify(${0}, null, 2))

# misc
snippet us "use strict"
	'use strict';

snippet timeout "timeout"
	setTimeout(function () {${0}}${2}, ${1:10});

snippet const "const"
	const ${1} = ${0};

snippet constn "const new"
	const ${1} = new ${0};

snippet let "let"
	let ${1} = ${0};

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}'

snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}'

snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}'

snippet foro "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet forl "for (let prop of object}) { ... }"
	for (let ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet ed "default"
	export default ${0}

snippet as "async"
	async ${0}

snippet aw "await"
	await ${0:${VISUAL}}

# zeller

snippet jcw = "CustomWrapper()"
	const CustomWrapper = ({
		initialUrl,
		initialState,
	}: {
		initialUrl?: string
		initialState?: unknown
	} = {}) => {
		const { Wrapper, getLocation } = createRouteTestingWrapper({
			initialUrl,
			initialState,
		})

		const { Provider, apollo } = createApolloTestingProvider()

		const user = userEvent.setup()

		const wrapper = ({ children }: { children?: React.ReactNode }) => (
			<Provider>
				<Wrapper>
					<ThemeWrapper>{children} </ThemeWrapper>
				</Wrapper>
			</Provider>
		)

		return Object.assign(wrapper, { apollo, getLocation, user })
	}

snippet sbr "select.ByRole('{role}')"
	const ${1} = select.ByRole('${2}', { name: ${3} })

snippet sbrn "select.ByRole('{role}', { name: '{name}' })"
	cosnt ${1} = select.ByRole('${2}', { name: ${3} })

snippet sbtid "select.ByTestId()"
	cosnt ${1} = select.ByTest('${2}')

